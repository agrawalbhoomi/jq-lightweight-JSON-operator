[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My blog on jq",
    "section": "",
    "text": "jq:Command-line JSON processor\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 25, 2025\n\n\nBhoomi Agrawal, Dhruv Gupta, Antara Donde\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/JQ-COMMANDLINE.html",
    "href": "posts/JQ-COMMANDLINE.html",
    "title": "jq:Command-line JSON processor",
    "section": "",
    "text": "jq – Lightweight command-line JSON processor\nJSON (JavaScript Object Notation) is a data format which structures and stores data efficiently. It is lightweight and readable which means that it is easy to read and write for humans and easy for machines to parse and generate. It is commonly used in APIs for the exchange of data between different applications. It is used in different programming languages like Python, JavaScript, Java, etc. JSON is a library in Python and its object looks like a python dictionary. ##### JSON Data Types: 1. String → “Alice” 2. Number → 25 3. Boolean → true / false 4. Array → [“Math”, “Science”] 5. Object → {“city”: “New York”, “zip”: “10001”} 6. Null → null\n\nIntroduction to Jq\nJq is a command-line tool which is used for transforming, processing and the filtering of JSON data. It is fast, readable and has been specially designed for effectively handling structured JSON files. There are different other JSON processors like Jello, jid, Gron and fx which can be used to alter data according to our needs, but jq is considered best because of its speed and flexibility. It can handle structured JSON data directly in the command line, making it a powerful tool for all developers and data analysts. A jq program is a filter. It takes an input and gives an output. It has a lot of different bulletin filters for different tasks. Filters can be glued together in jq, to basically form the loops and iterations that are made in different languages. The input to jq is parsed as a sequence of JSON values which are seperated by white space and are passed through the provied filter one at a time. Then these values are written in the stadard output.\n\n\nInstallation and Setup Guide\n\nSteps to install jq:\nThe jq could be installed in two major ways. 1. Using system commands/ external package managers 2. Manual Installation from jq official website (https://jqlang.org/download/)\n\n\nFor Windows\n\nChocolatey (choco):\n\n\nOpen PowerShell as Administrator and run:\n\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n\nRestart PowerShell and check installation:\n\nchoco --version\n\nFurther install jq using:\n\nchoco install jq\n\nWinget (winget) (Comes preinstalled on Windows 10/11):\n\n\nIf not installed, get it from the Microsoft Store: (https://apps.microsoft.com/detail/9nblggh4nns1?hl=en-US&gl=IN)\nCheck installation:\n\nwinget --version\n\nFurther install jq using:\n\n winget install jqlang.jq\n\nScoop (scoop):\n\n\nOpen Powershell as administrator and run:\n\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\niwr -useb get.scoop.sh | iex\n\nVerify Installation:\n\nscoop --version\n\nFurther install jq using:\n\nscoop install jq \nAlternatively, you can download the pre-built binary for Windows from the jq releases page and add it to your system’s PATH. (https://jqlang.org/download/)\n\n\nFor Linux\nThe package managers used in this are already pre installed in Linux. Using Bash is appropriate and recommended for Linux users because of its better compatibality, syntax friendliness and it comes pre installed in Linux systems.\n\nAPT (apt-get or apt) – Used in Debian-based distributions like Ubuntu, Debian, and Linux Mint.\n\n\nIn bash:\n\nsudo apt install jq\n\nIn some older systems use:\n\nsudo apt-get install apt\n\nDNF (dnf) – Used in Fedora, RHEL (Red Hat Enterprise Linux), and CentOS\n\n\nIn bash:\n\nsudo dnf install jq\n\nIn some older systems use:\n\nsudo yum install jq\n\n\n\nKey features and functionalities of jq\nOverview- - | jq . → Pretty print JSON - | jq ‘.key’ → Extract a specific key - | jq ‘.[ ].key’ → Extract values from an array - | jq ‘select(.condition)’ → Filter JSON by conditions - | jq ‘keys’ → Get all keys in an object - | jq ‘length’ → Count array elements\nThis is our input which we are going to use for this block.\n\nimport json\n\nwith open(\"users.json\", \"r\") as file:\n    users = json.load(file)\n\nprint(users)  \n\n{'users': [{'name': 'User1', 'age': 21, 'address': {'city': 'City1', 'zipcode': '12345'}, 'email': 'user1@example.com'}, {'name': 'User2', 'age': 45, 'address': {'city': 'City2', 'zipcode': '67890'}, 'email': 'user2@example.com'}, {'name': 'User3', 'age': 23, 'address': {'city': 'City3', 'zipcode': '54321'}, 'email': 'user3@example.com'}, {'name': 'User4', 'age': 34, 'address': {'city': 'City4', 'zipcode': '98765'}, 'email': 'user4@example.com'}]}\n\n\nSome of the key features of jq are given below:\n\nPretty-printing JSON: It formats the JSON data into a form which is in readable form.\nEXAMPLE:\n\ncommand\n\n\njq . users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"1.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nExtracting specific fields: It is used to select a speecific field from the JSON object.\n\nExample:\n\ncommand\n\njq '.users[].age' users.json\n\nfor nested fields\n\njq '.users[].address.city' users.json\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"2new.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nFiltering of the JSON data\nWe can extract the data that matches our condition by iterating through it.\n\nExample:\n\ncommand\n\njq '.users[] | select(.age &gt; 25)' users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"3.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nTransforming JSON by mapping and modifying\nWe can change the structure of a JSON data or can form new values.\n\nExample:\n\ncommand\n\njq '.users[] | {fullName: .name, years: .age}' users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"4new.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nWorking with arrays\nWe can use the .[] ,operator to extract values from an array\n\nExample:\n\nCommand\n\njq '.users[].email' users.json\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"5.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nSorting JSON Data:\nWe can use [jq ‘.JSON_data | sort_by(.(parameter))’ JSON_data.]json to sort the data according to the parameter. This helps us to get the data as per a particular category.\n\nExample:\n\ncommand\n\njq ' .users | sort_by(.age)' users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"6new.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nCounting elements\nWe can print the number of users useing the length command.\n\nExample:\n\ncommand\n\njq '.users | length' users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"7.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nString manipulation\nThis allows us to manipulate of strings using different filters for required output.\n\nExample:\n\ncommand for making names uppercase\n\njq '.users[].name | ascii_upcase' users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"8.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nCombining multiple commands\nWe can form a chain of different commands using the pipe ‘|’ operator. Which means that we could impose different conditions over the data in a single line of code.\n\nExample: Extract names, sort them and format them as an array.\n\ncommand\n\njq '[.users[].name] | sort' users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"9.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\nThe select operator This allows us to select data with particular conditions.\n\nExample:\n\ncommand\n\njq '.users[] | select(.age &gt; 25)' users.json\n\noutput\n\n\nfrom IPython.core.display import HTML\n\nHTML('&lt;img src=\"10.png\" style=\"width:100%; display:block; margin:0;\"&gt;')\n\n\n\n\n\n\nMost common mistakes!!\nThese are some mistakes that us being a beginner tend to make and to make sure that you do not commit any of these we take up this topic.\nBelow we have used the keyword “echo” as it allows us to pass JSON data as input directly rather than providing the whole file for input.\n\nRunning jq without JSON input\nIncorrect code-\n\njq '.name'\nCorrect code-\necho '{\"name\": \"Alice\"}' | jq '.name'\n\nWrong Structure\nIncorrect code-\n\necho '{\"users\": [{\"name\": \"Alice\"}]}' | jq '.name'\nCorrect code-\necho '{\"users\": [{\"name\": \"Alice\"}]}' | jq '.users[0].name'\n\nsyntax errors-\nIncorrect code-\n\necho '{\"name\": \"Alice\", \"age\": 30}' | jq '.age = 35'\nCorrect code-\necho '{\"name\": \"Alice\", \"age\": 30}' | jq '. | .age = 35'\n\n\nUse cases\njq is widely used in DevOps, API development, log analysis, data processing and automation. Its speed, flexibility, and simplicity make it one of the best tools for handling JSON data efficiently.\n\nProcessing API Responses\nSuppose you are working with APIs that give JSSON data andd you need to extract ceertain fields.\nSteps:\n\nFetch API data.\nUse jq command to extract the required fields.\n\nEXAMPLE: To extract all ussernames from a JSON API response\nLog file analysis\nSuppose many system logs are stored in JSON format, you can use jq to filter specific log details.\nSteps:\n\nCreate logs.json\nUse jq to filter only errors\n\n jq '.logs[] | select(.level==\"error\")' logs.json\nEXAMPLE: To extract error messages from a log file (logs.json)\nData transforming and formatting\nSuppose you need too convert the JSON data into a more structured format like .csv\nSteps:\n\nUse users.json\nConvert the JSON data into CSV using\n\n\njq -r '.users[] | [.name, .email, .age] | @csv' users.json\nEXAMPLE:\nTo convert the given data into csv.\n\nCombining and merging JSON files\nSuppose you have multiple JSON files and you need to merge them using jq.\nSteps:\n (a) Create two JSON files data1.json and data2.json\n\n (b) Merge them into a single file using \n\n   jq -s '.[0].users + .[1].users' data1.json data2.json\nEXAMPLE:\n    Merging data1.json and data2.json\n\nAutomating data pipelines\nSupposee using jq in a script to automate JSON data extraction and transformation.\nSteps:\n     (a) Extract only emails using\n\njq -r '.users[].email' users.json &gt; emails.txt\n        (b) Check the content of emails.txt using \ncat emails.txt\nEXAMPLE:\n    To extract user emails and save them to a file.\n\nConfiguration file handling\nSuppose you need to moddify JSON based configuration files.\n (a) Create config.json\n{\n\"settings\": {\n\"theme\": \"dark\",\n\"notifications\": true,\n\"enabled\": false}\n}\n (b) Change \"enabled: false to true using\njq '.settings.enabled = true' config.json &gt; new_config.json\n\n\n\nConclusion\njq is a powerful yet simple tool for working with JSON in the command line. It helps users quickly read, filter, and modify JSON data with ease. Whether you’re handling API responses, configuration files, or automation tasks, jq makes the process faster and more efficient. Its easy-to-use commands save time and effort, making it a great choice for anyone who works with JSON regularly.\n\n\nReferences\n\njq documentation https://devdocs.io/jq/\nhttps://www.baeldung.com/linux/jq-command-json?utm_source\nhttps://jqlang.org/?utm_source\nhttps://manpages.org/jq/?utm_source\n\n\n\nOther manuals and tutorials\n\nhttps://jqlang.org/tutorial/\nhttps://jqlang.org/manual/\nhttps://jqlang.org/manual/v1.6/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jq-lightweight command-line JSON processor",
    "section": "",
    "text": "By Bhoomi Agrawal (24110073), Dhruv Gupta (24110108) & Antara Donde (24110046)"
  }
]